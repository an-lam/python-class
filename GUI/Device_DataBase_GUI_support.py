#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Sep 29, 2017 12:15:22 PM


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    global ipp1
    ipp1 = StringVar()
    global ipp2
    ipp2 = StringVar()
    global ipp3
    ipp3 = StringVar()
    global ipp4
    ipp4 = StringVar()
    global msg
    msg = StringVar()
    global dev_location
    dev_location = StringVar()
    global dev_serial
    dev_serial = StringVar()
    global dev_model
    dev_model = StringVar()
    global list_location
    list_location = StringVar()
    global list_serial
    list_serial = IntVar()
    global list_model
    list_model = StringVar()
    global check_ip
    check_ip = BooleanVar()


import sqlite3
db = sqlite3.connect("Device_Database_GUI.sqlite")
db.execute("CREATE TABLE IF NOT EXISTS Device_Database_GUI (d_ip_address TEXT PRIMARY KEY NOT NULL, \
d_location TEXT, d_serial INTEGER, d_model TEXT)")

def insert_device(ip_address, location, serial, model):
    """
    # Check whether ip address already existed, if yes, it will not be added to the table
    ip_exist=False
    for ip_temp in db.execute("SELECT d_ip_address FROM Device_Database_GUI"):
        #print (ip_address)
        print("ip-temp: %s" % str(ip_temp))
        print("ip_address: %s" % str(ip_address))
        if (ip_address == ip_temp):
            ip_exist=True
            print(ip_exist)
            break
    if not ip_exist:
        db.execute("INSERT INTO Device_Database_GUI VALUES (?, ?, ?, ?)", (ip_address, location, serial, model))
        db.comit()
    print(ip_exist)
    return ip_exist
    """
    db.execute("INSERT INTO Device_Database_GUI VALUES (?, ?, ?, ?)", (ip_address, location, serial, model))
    db.commit()
    return False


def update_device(ip_address, location, serial, model):
    print("update_device ip_address: %s" %ip_address)
    print("update_device location: %s" %location)
    print("update_device serial: %s" %serial)
    print("update_device model: %s" %model)

    update_stm = "UPDATE Device_Database_GUI SET d_location=?, d_serial=?, d_model=? WHERE d_ip_address = ?"
    print("update_stm: {}".format(update_stm))
    update_cursor = db.cursor()
    update_cursor.execute(update_stm, (location, serial, model, ip_address))
    print("{} rows updated".format(update_cursor.rowcount))
    print(ip_address,' ',location,'  ',serial, ' ', model)

    update_cursor.connection.commit()
    update_cursor.close()

    db.commit()

def list_device(ip):
    cursor_location = db.execute("SELECT d_location FROM  Device_Database_GUI WHERE d_ip_address = ?", (ip,))
    cursor_serial = db.execute("SELECT d_serial FROM  Device_Database_GUI WHERE d_ip_address = ?", (ip,))
    cursor_model = db.execute("SELECT d_model FROM  Device_Database_GUI WHERE d_ip_address = ?", (ip,))

    list_location = cursor_location.fetchone()
    list_serial = cursor_serial.fetchone()
    list_model = cursor_model.fetchone()
    dev_location.set(list_location)
    dev_serial.set(list_serial)
    dev_model.set(list_model)
    # For testing
    print("list ip: %s" %ip)
    print("list location: %s" %list_location)
    print("list serial: %s" %list_serial)
    print("list model: %s:" %list_model)
    list_location = str(dev_location.get())
    list_serial = dev_serial.get()
    list_model = dev_model.get()
    print("list location from get: %s" %list_location)
    print("list serial from get: %s" %list_serial)
    print("list model from get: %s:" %list_model)

def list_all():
    cursor = db.execute("SELECT * FROM  Device_Database_GUI")
    for row in cursor:
        print(row)

def validate_ip_addr():
    print("Device_DataBase_GUI_support.validate_ip_addr")
    ipSect1 = str(ipp1.get())
    ipSect2 = str(ipp2.get())
    ipSect3 = str(ipp3.get())
    ipSect4 = str(ipp4.get())
    print("ipSect1: %s" %ipSect1)
    print("ipSect2: %s" %ipSect2)
    print("ipSect3: %s" %ipSect3)
    print("ipSect4: %s" %ipSect4)

    if ((ipSect1=='') or (ipSect2=='') or (ipSect3=='') or (ipSect4=='')):
        msg.set("Please enter a valid IP address !!!")
    else:
        current_ip = ipSect1 + '.' + ipSect2 + '.' + ipSect3 + '.' + ipSect4
        msg.set("The IP address you entered is: %s" % current_ip)
        print("The IP address you entered is: %s" % current_ip)
        return (current_ip)

def callback_add():
    global check_ip
    check_ip=False
    print('Device_DataBase_GUI_support.callback_add')
    new_ip = validate_ip_addr()
    new_location = dev_location.get()
    new_serial = dev_serial.get()
    new_model = dev_model.get()

    print("add-ip: %s" %new_ip)
    print("add_location from get: %s" %new_location)
    print("add_serial from get: %s" %new_serial)
    print("add_model from get: %s" %new_model)
    # if ip address found in the table, it will not add this device to table
    ip_exist=insert_device(new_ip, new_location, new_serial, new_model)
    #if ip_exist:
    #    msg.set("Device has been added to the table")
    #else:
    #    msg.set("Device with this IP address already existed")
    print(ip_exist)
    sys.stdout.flush()

def callback_clear():
    print('Device_DataBase_GUI_support.callback_clear')
    ipp1.set('')
    ipp2.set('')
    ipp3.set('')
    ipp4.set('')
    dev_location.set('')
    dev_serial.set('')
    dev_model.set('')
    msg.set("All fields have been cleared!")
    sys.stdout.flush()

def callback_delete():
    print('Device_DataBase_GUI_support.callback_delete')
    sys.stdout.flush()

def callback_lookup():
    print('Device_DataBase_GUI_support.callback_lookup')
    lookup_addr = validate_ip_addr()
    list_device(lookup_addr)
    lookup_location = dev_location.get()
    lookup_serial = dev_serial.get()
    lookup_model = dev_model.get()
    print("lookup location= %s" %lookup_location)
    print("lookup_serial= %s" %lookup_serial)
    print("lookup_model= %s" %lookup_model)

    sys.stdout.flush()

def callback_update():
    print('Device_DataBase_GUI_support.callback_update')
    update_ip = validate_ip_addr()
    update_location = dev_location.get()
    update_serial = dev_serial.get()
    update_model = dev_model.get()
    print("update location= %s" %update_location)
    print("update_serial= %s" %update_serial)
    print("update_model= %s" %update_model)
    update_device(update_ip, update_location, update_serial, update_model)
    sys.stdout.flush()

def callback_quit():
    print('Device_DataBase_GUI_support.callback_quit')
    top_level.quit()
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import Device_DataBase_GUI
    Device_DataBase_GUI.vp_start_gui()
    db.commit()
    db.close()


